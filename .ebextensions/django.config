option_settings:
  aws:elasticbeanstalk:application:environment:
    PYTHONPATH: "/opt/python/current/app/betterbeauty:$PYTHONPATH"
  aws:elasticbeanstalk:container:python:
    WSGIPath: betterbeauty/core/wsgi.py
  aws:elasticbeanstalk:container:python:staticfiles:
    /static/: betterbeauty/static/

files:
# Add pre-deploy and pre-config hooks to patch apache/wsgin config, adding a new source of
# configuration by means of injecting the IncludeOptional directive to the end of default
# VirtualHost section. Now, extra settings will be imported by Apache from
# /etc/httpd/wsgi.conf.d directory and will override settings auto-generated by AWS.
# So whatever *.conf file we'll place to /etc/httpd/wsgi.conf.d, it will be imported as
# settings for our virtual host.

# Source script: https://gist.github.com/djshen-ponddy/0c44a5d835aad7746518d90c360a1297
    "/opt/elasticbeanstalk/hooks/configdeploy/pre/99patchwsgi.py": &patch_wsgi_script
        mode: "000755"
        owner: root
        group: root
        content: |
            #!/usr/bin/env python
            import os
            import re
            import sys
            sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
            import config

            def main():
                if 'EB_SYSTEM_STARTUP' in os.environ:
                    return
                try:
                    # open staging (i.e. not yet deployed) wsgi.conf, and wipe out everything
                    # starting from WSGIDaemonProcess directive till the end of virtual host
                    # section. Replace it with IncludeOptional directive: we'll move wiped
                    # out content into our custom file, which we can easily change.

                    WSGI_STAGING_CONFIG = config.get_container_config('wsgi_staging_config')
                    config.execute(['mkdir', '-p', '/etc/httpd/wsgi.conf.d'])
                    pattern = r'WSGIDaemonProcess(.|\n)*(?=<\/VirtualHost>)'
                    replacement = r'IncludeOptional /etc/httpd/wsgi.conf.d/*.conf\n'

                    # read source config and patch
                    with open(WSGI_STAGING_CONFIG, 'r') as wsgi_config:
                        wsgi_config_content = wsgi_config.read()
                        patched_wsgi_config = re.sub(pattern, replacement, wsgi_config_content)
                    # write patched content
                    with open(WSGI_STAGING_CONFIG, 'w') as wsgi_config:
                        wsgi_config.write(patched_wsgi_config)
                except Exception, e:
                    config.emit_error_event(config.USER_ERROR_MESSAGES['badappconfig'])
                    config.diagnostic('Error patching wsgi.conf during configdeploy/pre: %s' % str(e))
                    sys.exit(1)

            if __name__ == '__main__':
                config.configure_stdout_logger()
                main()

    "/opt/elasticbeanstalk/hooks/appdeploy/pre/99patchwsgi.py": *patch_wsgi_script

    "/etc/httpd/wsgi.conf.d/wsgi_custom.conf":
        mode: "000644"
        owner: root
        group: root
        content: |
            LogLevel info
            WSGIDaemonProcess wsgi processes=1 threads=15 display-name=%{GROUP} \
              python-home=/opt/python/run/venv/ \
              python-path=/opt/python/current/app user=wsgi group=wsgi \
              home=/opt/python/current/app \
              request-timeout=30
            WSGIProcessGroup wsgi
            WSGIPassAuthorization On

            LoadModule deflate_module modules/mod_deflate.so

            SetOutputFilter DEFLATE

            # mod_deflate configuration
            <IfModule mod_deflate.c>
                # Restrict compression to these MIME types
                AddOutputFilterByType DEFLATE text/plain
                AddOutputFilterByType DEFLATE text/html
                AddOutputFilterByType DEFLATE text/javascript
                AddOutputFilterByType DEFLATE text/css
                AddOutputFilterByType DEFLATE application/json
                <IfModule mod_headers.c>
                    # Make sure proxies don't deliver the wrong content
                    Header append Vary User-Agent env=!dont-vary
                </IfModule>
            </IfModule>
    "/etc/cron.d/mb_cron":
        mode: "000644"
        owner: root
        group: root
        content: |
            */15 * * * * root source /opt/python/run/venv/bin/activate && source /opt/python/current/env && COMMAND=auto_checkout_appointments make -C /opt/python/current/app -f /opt/python/current/app/Makefile manage
            */5 * * * * root source /opt/python/run/venv/bin/activate && source /opt/python/current/env && COMMAND=generate_google_calendar_events make -C /opt/python/current/app -f /opt/python/current/app/Makefile manage
            */1 * * * * root source /opt/python/run/venv/bin/activate && source /opt/python/current/env && COMMAND=geocode_address make -C /opt/python/current/app -f /opt/python/current/app/Makefile manage
            */11 * * * * root source /opt/python/run/venv/bin/activate && source /opt/python/current/env && COMMAND=send_notifications make -C /opt/python/current/app -f /opt/python/current/app/Makefile manage
            7,22,37,52 * * * * root source /opt/python/run/venv/bin/activate && source /opt/python/current/env && COMMAND=generate_notifications make -C /opt/python/current/app -f /opt/python/current/app/Makefile manage
    "/tmp/setup_loggly.sh":
        mode: "000774"
        owner: root
        group: root
        content: |
            #!/usr/bin/env bash
            # auto-generate rsyslog file
            sudo cat > /etc/rsyslog.d/22-loggly.conf << EOL
            # Setup disk assisted queues
            \$WorkDirectory /var/spool/rsyslog # where to place spool files
            \$ActionQueueFileName fwdRule1     # unique name prefix for spool files
            \$ActionQueueMaxDiskSpace 1g       # 1gb space limit (use as much as possible)
            \$ActionQueueSaveOnShutdown on     # save messages to disk on shutdown
            \$ActionQueueType LinkedList       # run asynchronously
            \$ActionResumeRetryCount -1        # infinite retries if host is down
            \$template LogglyFormat,"<%pri%>%protocol-version% %timestamp:::date-rfc3339% %HOSTNAME% %app-name% %procid% %msgid% [$LOGGLY_TOKEN@41058 tag=\"server_$LEVEL\"] %msg%\n"

            # Send messages to Loggly over TCP using the template.
            *.* @@logs-01.loggly.com:514;LogglyFormat
            \$MaxMessageSize 64k
            EOL

            sudo cat > /etc/rsyslog.d/21-django.conf << EOL
            #provides UDP syslog reception
            \$ModLoad imudp
            \$UDPServerRun 514
            #Add a tag for Django events
            \$template LogglyFormatDjango,"<%pri%>%protocol-version% %timestamp:::date-rfc3339% %HOSTNAME% %app-name% %procid% %msgid% [$LOGGLY_TOKEN@41058 tag=\"madebeauty_$LEVEL\"] %msg%\n"
            local7.* @@logs-01.loggly.com:514;LogglyFormatDjango
            local7.* ~ #discards the messages so they don't end up in /var/log/syslog
            EOL

            sudo cat > /etc/rsyslog.d/21-apache.conf << EOL
            \$ModLoad imfile
            \$InputFilePollInterval 10
            \$PrivDropToGroup adm
            \$WorkDirectory /var/spool/rsyslog

            # Apache access file:
            \$InputFileName /var/log/httpd/access_log
            \$InputFileTag apache-access:
            \$InputFileStateFile stat-apache-access
            \$InputFileSeverity info
            \$InputFilePersistStateInterval 20000
            \$InputRunFileMonitor

            #Apache Error file:
            \$InputFileName /var/log/httpd/error_log
            \$InputFileTag apache-error:
            \$InputFileStateFile stat-apache-error
            \$InputFileSeverity error
            \$InputFilePersistStateInterval 20000
            \$InputRunFileMonitor

            #Add a tag for apache events
            \$template LogglyFormatApache,"<%pri%>%protocol-version% %timestamp:::date-rfc3339% %HOSTNAME% %app-name% %procid% %msgid% [$LOGGLY_TOKEN@41058 tag=\"apache_$LEVEL\"] %msg%\n"

            if \$programname == 'apache-access' then @@logs-01.loggly.com:514;LogglyFormatApache
            if \$programname == 'apache-access' then ~
            if \$programname == 'apache-error' then @@logs-01.loggly.com:514;LogglyFormatApache
            if \$programname == 'apache-error' then ~
            EOL

            mkdir /var/spool/rsyslog || true
            sudo service rsyslog restart
    "/home/ec2-user/.ssh/authorized_keys":
        mode: "000400"
        owner: ec2-user
        group: ec2-user
        content: |
          ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8M8ROpA+tR9nNL4esApetyymRoX5cRDMS408m+tHLvFlza6tPJ+HnPed3lI95ShHhCfCFRMaVVdjL2sa8L/HpbEejOWSbgLvGqKiVQKM/VLzc7jgYI5Iw5rQI9gemMt+GIX9yVBP2UNguh3Sqw0qU4wTfM+2EvB+4JWWy9L/VHJggGo88L8/GGTkjUTrpSK6gEJa21o1MJfFyu7i9kGDUawwI8ndqSQoHgO3kxaVS+cjQyz/fzercOz2DRDpYO0+D3mOogKgjobofs1Ov1WhX5XqdoopEjhlq+Fet+zmiHXLZVcVeDolT8kbgTRHcWJMMXQdU27M9mhF/3cB0eBqn tigran@najaryan.net
          ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC875ojBzE8EiOrgti6Gc/kzuV7xOD+4RVagfeDi73V24OJvvpjia6k7/EFMYLUavN3SXxMYiO3sOAq/NyiCPWILrnILXnf9nKcLf6QLhO6tubl8HdxJ43qWzS2BNgSndrFl42iv3cwQeCha1dz1SFN6jZ/qGdGX/Jmbd5gI+ZBkqlMe6BtgcnCmTPp0helnpU6fhAy4tsw0a0ePQPe8bQzkPKTLD7Buq2HNmmxdGsiiRaJdodFxUOqweUAGGiNizp26ucFe+ph5PDsbFluRWcjY873O93Uyc80x7B0LYi0RcHLQDOkM5Vv8W0/uyqutLG+FMLPVNj/pM8yB6j8uAc7T8A7KrIeCWi8l36+htQXUhvKXtzocKPMqwYD6QQfeqD6AyoffZuguUXHCcMNxzlAm2j+COmYUCeoSk/Xqf4J+to2czgvjG98760BNldf7Tf6g7aVz1Sp1o7W1aO10KMhItJkGDEgSuuCxH/wVmr0ij0e2dFLa7szT9XOF3qYB7sQpbZIlA5Ig3Aj3Ue1DC60UzKtIKelS5j87Z+ZAeBticoHi6FDoq2q9ts0/RoAAJ/Ta3WWDSHKuQ2ra9V/mUXYhsjQqXmI85dw2eXZDX0a4t5nbDju/D/JUi93jmok6W1PaxtZoIJ2rSzMv4HTZsiNaFf6A/hq8+Mrh98NPKX+WQ== alexeidjango@gmail.com
    "/tmp/upgrade_wsgi.sh":
        mode: "000774"
        owner: root
        group: root
        content: |
            #!/usr/bin/env bash
            # Download sources, make, and install mod_wsgi v. 4.6.5
            set -ev
            rm -rf /tmp/mod_wsgi || true
            mkdir -p /tmp/mod_wsgi || true
            cd /tmp/mod_wsgi
            wget https://github.com/GrahamDumpleton/mod_wsgi/archive/4.6.5.tar.gz
            tar xvfz /tmp/mod_wsgi/4.6.5.tar.gz
            echo "y" | sudo yum install httpd24-devel
            cd /tmp/mod_wsgi/mod_wsgi-4.6.5
            ./configure --with-python=/opt/python/run/baselinenv/bin/python3.6
            make
            sudo make install

container_commands:
    01_yum_update:
        command: sudo yum -y update
    02_epel_repo:
        command: sudo yum-config-manager -y --enable epel
    03_install_gdal_packages:
        command: sudo yum -y install gdal gdal-devel
    04_migrate:
        command: "source /opt/python/run/venv/bin/activate && source /opt/python/current/env && python betterbeauty/manage.py migrate"
        leader_only: true
    05_collect_static:
        command: "source /opt/python/run/venv/bin/activate && source /opt/python/current/env && python betterbeauty/manage.py collectstatic --noinput"
    06_create_superuser:
        command: "source /opt/python/run/venv/bin/activate && source /opt/python/current/env && python betterbeauty/manage.py add_made_superuser"
        leader_only: true

commands:
    01_remove_old_cron:
        command: "rm -f /etc/cron.d/*.bak"
    02_configure_rsyslog_for_loggly:
        command: "source /opt/python/run/venv/bin/activate && source /opt/python/current/env && /tmp/setup_loggly.sh"
    03_cleanup_rsyslog_setup:
        command: "rm -f /tmp/setup_loggly.sh*"
    04_execure_env_vars:
        command: sudo grep "# path setup" /home/ec2-user/.bash_profile || sudo echo -e "\n# path setup\nsource /opt/python/run/venv/bin/activate && source /opt/python/current/env" >> /home/ec2-user/.bash_profile
    05_link_folder:
        command: sudo ln -s /opt/python/current/app /madebeauty || true
    06_upgrade_mod_wsgi:
        command: /tmp/upgrade_wsgi.sh


